// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (channel_id, user_id, content)
VALUES ($1, $2, $3)
RETURNING id, channel_id, user_id, content, created_at
`

type CreateMessageParams struct {
	ChannelID int32
	UserID    int32
	Content   string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.ChannelID, arg.UserID, arg.Content)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChannelID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const listMessagesByChannel = `-- name: ListMessagesByChannel :many
SELECT 
    m.id, 
    m.channel_id, 
    m.user_id, 
    m.content, 
    u.username AS username, 
    m.created_at,
    u.avatar_url AS avatar_url,
    u.avatar_color AS avatar_color
FROM messages m
LEFT JOIN users u ON m.user_id = u.id
WHERE m.channel_id = $1
ORDER BY m.created_at ASC
LIMIT $2 OFFSET $3
`

type ListMessagesByChannelParams struct {
	ChannelID int32
	Limit     int32
	Offset    int32
}

type ListMessagesByChannelRow struct {
	ID          int32
	ChannelID   int32
	UserID      int32
	Content     string
	Username    pgtype.Text
	CreatedAt   pgtype.Timestamptz
	AvatarUrl   pgtype.Text
	AvatarColor pgtype.Text
}

func (q *Queries) ListMessagesByChannel(ctx context.Context, arg ListMessagesByChannelParams) ([]ListMessagesByChannelRow, error) {
	rows, err := q.db.Query(ctx, listMessagesByChannel, arg.ChannelID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMessagesByChannelRow
	for rows.Next() {
		var i ListMessagesByChannelRow
		if err := rows.Scan(
			&i.ID,
			&i.ChannelID,
			&i.UserID,
			&i.Content,
			&i.Username,
			&i.CreatedAt,
			&i.AvatarUrl,
			&i.AvatarColor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
