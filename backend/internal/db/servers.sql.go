// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: servers.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createServer = `-- name: CreateServer :one
INSERT INTO servers (name, creator_id, is_public)
VALUES ($1, $2, $3)
RETURNING id, name, creator_id, is_public, created_at
`

type CreateServerParams struct {
	Name      string
	CreatorID pgtype.Int4
	IsPublic  pgtype.Bool
}

func (q *Queries) CreateServer(ctx context.Context, arg CreateServerParams) (Server, error) {
	row := q.db.QueryRow(ctx, createServer, arg.Name, arg.CreatorID, arg.IsPublic)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatorID,
		&i.IsPublic,
		&i.CreatedAt,
	)
	return i, err
}

const getServer = `-- name: GetServer :one
SELECT id, name, creator_id, is_public, created_at
FROM servers
WHERE id = $1
`

func (q *Queries) GetServer(ctx context.Context, id int32) (Server, error) {
	row := q.db.QueryRow(ctx, getServer, id)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatorID,
		&i.IsPublic,
		&i.CreatedAt,
	)
	return i, err
}

const isServerMember = `-- name: IsServerMember :one
SELECT EXISTS (
    SELECT 1
    FROM server_members
    WHERE server_id = $1 AND user_id = $2
)
`

type IsServerMemberParams struct {
	ServerID int32
	UserID   int32
}

func (q *Queries) IsServerMember(ctx context.Context, arg IsServerMemberParams) (bool, error) {
	row := q.db.QueryRow(ctx, isServerMember, arg.ServerID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const joinServer = `-- name: JoinServer :exec
INSERT INTO server_members (server_id, user_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type JoinServerParams struct {
	ServerID int32
	UserID   int32
}

func (q *Queries) JoinServer(ctx context.Context, arg JoinServerParams) error {
	_, err := q.db.Exec(ctx, joinServer, arg.ServerID, arg.UserID)
	return err
}

const listUserServers = `-- name: ListUserServers :many
SELECT s.id, 
    s.name, 
    s.creator_id, 
    s.is_public, 
    s.created_at
FROM servers s
JOIN server_members sm ON s.id = sm.server_id
WHERE sm.user_id = $1
ORDER BY s.created_at ASC
`

func (q *Queries) ListUserServers(ctx context.Context, userID int32) ([]Server, error) {
	rows, err := q.db.Query(ctx, listUserServers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Server
	for rows.Next() {
		var i Server
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatorID,
			&i.IsPublic,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
