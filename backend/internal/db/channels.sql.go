// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: channels.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChannel = `-- name: CreateChannel :one
INSERT INTO channels (name, created_by, server_id)
VALUES ($1, $2, $3)
RETURNING id, name, created_by, server_id, created_at
`

type CreateChannelParams struct {
	Name      string
	CreatedBy pgtype.Int4
	ServerID  int32
}

type CreateChannelRow struct {
	ID        int32
	Name      string
	CreatedBy pgtype.Int4
	ServerID  int32
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (CreateChannelRow, error) {
	row := q.db.QueryRow(ctx, createChannel, arg.Name, arg.CreatedBy, arg.ServerID)
	var i CreateChannelRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.ServerID,
		&i.CreatedAt,
	)
	return i, err
}

const getChannel = `-- name: GetChannel :one
SELECT id, name, created_by, server_id, created_at
FROM channels
WHERE id = $1
`

type GetChannelRow struct {
	ID        int32
	Name      string
	CreatedBy pgtype.Int4
	ServerID  int32
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) GetChannel(ctx context.Context, id int32) (GetChannelRow, error) {
	row := q.db.QueryRow(ctx, getChannel, id)
	var i GetChannelRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.ServerID,
		&i.CreatedAt,
	)
	return i, err
}

const listChannels = `-- name: ListChannels :many
SELECT id, name, created_by, server_id, created_at
FROM channels
WHERE server_id = $1
ORDER BY created_at ASC
`

type ListChannelsRow struct {
	ID        int32
	Name      string
	CreatedBy pgtype.Int4
	ServerID  int32
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) ListChannels(ctx context.Context, serverID int32) ([]ListChannelsRow, error) {
	rows, err := q.db.Query(ctx, listChannels, serverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListChannelsRow
	for rows.Next() {
		var i ListChannelsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedBy,
			&i.ServerID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
